{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kumar\\\\Desktop\\\\Cllg_Projects\\\\LAWYER_APPOINTMENT\\\\practice\\\\lawyer-frontend\\\\src\\\\component\\\\TextInput.jsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// import React, { useState } from \"react\";\n// import { Eye, EyeOff } from \"lucide-react\";\n// import \"./style.css\";\n\n// const TextInput = ({\n//   label,\n//   type = \"standard\",\n//   isDisabled = false,\n//   password = false,\n//   inputType = \"text\",\n//   readOnly = false,\n//   validation = \"\",\n//   icon = null,\n//   showPasswordToggle = false,\n//   className = \"\",\n//   ...props\n// }) => {\n//   const [showPassword, setShowPassword] = useState(false);\n//   const [inputValue, setInputValue] = useState(\"\");\n//   const [error, setError] = useState(\"\");\n\n//   const handleTogglePassword = () => {\n//     setShowPassword((prev) => !prev);\n//   };\n\n//   const handleInputChange = (e) => {\n//     setInputValue(e.target.value);\n//     if (error) setError(\"\"); // Clear the error on typing\n//   };\n\n//   const handleSubmit = () => {\n//     if (!inputValue.trim()) {\n//       setError(\"This field cannot be empty\");\n//     } else if (validation && !new RegExp(validation).test(inputValue)) {\n//       setError(\"Invalid input format\");\n//     } else {\n//       setError(\"\");\n//       alert(\"Form submitted successfully!\");\n//     }\n//   };\n\n//   const inputClass =\n//     type === \"filled\"\n//       ? \"text-input-filled\"\n//       : type === \"outlined\"\n//       ? \"text-input-outlined\"\n//       : \"text-input-standard\";\n\n//   return (\n//     <div className={`text-input-container ${className}`}>\n//       {label && <label className=\"text-input-label\">{label}</label>}\n//       <div className={`text-input-wrapper ${inputClass}`}>\n//         {icon && <span className=\"text-input-icon\">{icon}</span>}\n//         <input\n//           type={password && !showPassword ? \"password\" : inputType}\n//           disabled={isDisabled}\n//           readOnly={readOnly}\n//           className=\"text-input-field\"\n//           value={inputValue}\n//           onChange={handleInputChange}\n//           {...props}\n//         />\n//         {password && showPasswordToggle && (\n//           <button\n//             type=\"button\"\n//             onClick={handleTogglePassword}\n//             className=\"text-input-toggle\"\n//           >\n//             {showPassword ? <EyeOff size={18} /> : <Eye size={18} />}\n//           </button>\n//         )}\n//       </div>\n//       {error && <p className=\"text-input-error\">{error}</p>}\n//       <button className=\"text-input-submit\" onClick={handleSubmit}>\n//         Submit\n//       </button>\n//     </div>\n//   );\n// };\n\n// export default TextInput;\n\nexport const TextInput = ({\n  label,\n  picture,\n  validation,\n  type\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      placeholder: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 8\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 6\n  }, this);\n};\n_c = TextInput;\nvar _c;\n$RefreshReg$(_c, \"TextInput\");","map":{"version":3,"names":["TextInput","label","picture","validation","type","_jsxDEV","children","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/kumar/Desktop/Cllg_Projects/LAWYER_APPOINTMENT/practice/lawyer-frontend/src/component/TextInput.jsx"],"sourcesContent":["// import React, { useState } from \"react\";\r\n// import { Eye, EyeOff } from \"lucide-react\";\r\n// import \"./style.css\";\r\n\r\n// const TextInput = ({\r\n//   label,\r\n//   type = \"standard\",\r\n//   isDisabled = false,\r\n//   password = false,\r\n//   inputType = \"text\",\r\n//   readOnly = false,\r\n//   validation = \"\",\r\n//   icon = null,\r\n//   showPasswordToggle = false,\r\n//   className = \"\",\r\n//   ...props\r\n// }) => {\r\n//   const [showPassword, setShowPassword] = useState(false);\r\n//   const [inputValue, setInputValue] = useState(\"\");\r\n//   const [error, setError] = useState(\"\");\r\n\r\n//   const handleTogglePassword = () => {\r\n//     setShowPassword((prev) => !prev);\r\n//   };\r\n\r\n//   const handleInputChange = (e) => {\r\n//     setInputValue(e.target.value);\r\n//     if (error) setError(\"\"); // Clear the error on typing\r\n//   };\r\n\r\n//   const handleSubmit = () => {\r\n//     if (!inputValue.trim()) {\r\n//       setError(\"This field cannot be empty\");\r\n//     } else if (validation && !new RegExp(validation).test(inputValue)) {\r\n//       setError(\"Invalid input format\");\r\n//     } else {\r\n//       setError(\"\");\r\n//       alert(\"Form submitted successfully!\");\r\n//     }\r\n//   };\r\n\r\n//   const inputClass =\r\n//     type === \"filled\"\r\n//       ? \"text-input-filled\"\r\n//       : type === \"outlined\"\r\n//       ? \"text-input-outlined\"\r\n//       : \"text-input-standard\";\r\n\r\n//   return (\r\n//     <div className={`text-input-container ${className}`}>\r\n//       {label && <label className=\"text-input-label\">{label}</label>}\r\n//       <div className={`text-input-wrapper ${inputClass}`}>\r\n//         {icon && <span className=\"text-input-icon\">{icon}</span>}\r\n//         <input\r\n//           type={password && !showPassword ? \"password\" : inputType}\r\n//           disabled={isDisabled}\r\n//           readOnly={readOnly}\r\n//           className=\"text-input-field\"\r\n//           value={inputValue}\r\n//           onChange={handleInputChange}\r\n//           {...props}\r\n//         />\r\n//         {password && showPasswordToggle && (\r\n//           <button\r\n//             type=\"button\"\r\n//             onClick={handleTogglePassword}\r\n//             className=\"text-input-toggle\"\r\n//           >\r\n//             {showPassword ? <EyeOff size={18} /> : <Eye size={18} />}\r\n//           </button>\r\n//         )}\r\n//       </div>\r\n//       {error && <p className=\"text-input-error\">{error}</p>}\r\n//       <button className=\"text-input-submit\" onClick={handleSubmit}>\r\n//         Submit\r\n//       </button>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default TextInput;\r\n\r\nexport const TextInput = ({label, picture, validation, type}) => {\r\n   return(\r\n     <div>\r\n       <input placeholder={label}/>\r\n     </div>\r\n   )\r\n }\r\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAO,MAAMA,SAAS,GAAGA,CAAC;EAACC,KAAK;EAAEC,OAAO;EAAEC,UAAU;EAAEC;AAAI,CAAC,KAAK;EAC9D,oBACEC,OAAA;IAAAC,QAAA,eACED,OAAA;MAAOE,WAAW,EAAEN;IAAM;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzB,CAAC;AAEV,CAAC;AAAAC,EAAA,GANWZ,SAAS;AAAA,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}